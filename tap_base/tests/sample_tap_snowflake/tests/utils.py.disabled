import os

import singer

import tap_snowflake
from tap_snowflake.connection import SnowflakeConnection

SCHEMA_NAME = "tap_snowflake_test"


def get_db_config():
    return {
        "account": os.environ.get("TAP_SNOWFLAKE_ACCOUNT"),
        "dbname": os.environ.get("TAP_SNOWFLAKE_DBNAME"),
        "user": os.environ.get("TAP_SNOWFLAKE_USER"),
        "password": os.environ.get("TAP_SNOWFLAKE_PASSWORD"),
        "warehouse": os.environ.get("TAP_SNOWFLAKE_WAREHOUSE"),
        "tables": "FAKE_TABLES",
    }


def get_test_connection():
    db_config = get_db_config()
    snowflake_conn = SnowflakeConnection(db_config)

    with snowflake_conn.open_connection() as open_conn:
        with open_conn.cursor() as cur:
            try:
                cur.execute("DROP SCHEMA IF EXISTS {}".format(SCHEMA_NAME))
            except:
                pass
            cur.execute("CREATE SCHEMA {}".format(SCHEMA_NAME))

    return snowflake_conn


def discover_catalog(snowflake_conn, config):
    catalog = tap_snowflake.discover_catalog(snowflake_conn, config)
    streams = []

    for stream in catalog.streams:
        streams.append(stream)

    catalog.streams = streams

    return catalog

